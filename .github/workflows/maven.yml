
name: BrowserStack Experiment

on:
  workflow_dispatch:
    inputs:
      filter:
        description: 'Filter for tests'
        required: true
        default: '@Smoke and @Automated'
      device:
        description: 'Select the device to test'
        required: true
        type: choice
        options:
          - Samsung Galaxy A11
          - Samsung Galaxy A51
          - Motorola Moto G71 5G
          - Google Pixel 7 Pro
          - Xiaomi Redmi Note 11
          - Huawei P30
          - Oppo Reno 6
        default: 'Samsung Galaxy A11'
      upload_apk:
        description: 'Select whether to upload the APK'
        required: true
        type: choice
        options:
          - 'Yes'
          - 'No'
        default: 'No'

jobs:
  test:
    runs-on: ubuntu-22.04
    container: crowdar/lippia:3.3.0.0-jdk17
    environment: Automation
    env:
      BSUSER: ${{ secrets.BSUSER }}
      AUTHTOKEN: ${{ secrets.AUTHTOKEN }}
      BSDEVICE: ${{ github.event.inputs.device }}
      BSAPP: ${{ secrets.BSAPP }}
      LTM_GENERAL: ${{ secrets.LTM_GENERAL }}
      LTM_GENERAL_PASS: ${{ secrets.LTM_GENERAL_PASS }}
      UPLOAD_APK: ${{ github.event.inputs.upload_apk }}
      DROPBOX_LINK: "https://www.dropbox.com/scl/fi/jjic9h02azue9w7j1l50r/app.apk?rlkey=ndq15oeynsotqv44fyji3tv7x&st=bzoyr5y0&dl=1"  # URL de Dropbox con dl=1

    steps:
      - name: Checkout to the repository
        uses: actions/checkout@v4

      - name: Configuring JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install jq (for parsing JSON)
        run: |
          curl -sSL https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -o /usr/local/bin/jq
          chmod +x /usr/local/bin/jq

      - name: Set Android version based on selected device
        run: |
          if [[ "${{ github.event.inputs.device }}" == "Samsung Galaxy A11" ]]; then
            echo "BSOS=10" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.device }}" == "Samsung Galaxy A51" ]]; then
            echo "BSOS=10" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.device }}" == "Motorola Moto G71 5G" ]]; then
            echo "BSOS=11" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.device }}" == "Google Pixel 7 Pro" ]]; then
            echo "BSOS=13" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.device }}" == "Xiaomi Redmi Note 11" ]]; then
            echo "BSOS=11" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.device }}" == "Huawei P30" ]]; then
            echo "BSOS=9" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.device }}" == "Oppo Reno 6" ]]; then
            echo "BSOS=11" >> $GITHUB_ENV
          fi

      - name: Configure Maven settings
        run: |
          mkdir -p ~/.m2
          echo '<settings>
          <mirrors>
            <mirror>
                <id>central</id>
                <url>https://repo.maven.apache.org/maven2</url>
                <mirrorOf>*</mirrorOf>
            </mirror>
          </mirrors>
          </settings>' > ~/.m2/settings.xml

      - name: List directories to verify path
        run: ls -al ~/.m2

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Checking Maven dependencies
        run: mvn dependency:resolve

      - name: Setting environment variable
        run: echo "COMBINED_FILTER=${{ github.event.inputs.filter }}" >> $GITHUB_ENV

      - name: Debugging environment variables
        run: |
          echo "BSDEVICE: $BSDEVICE"
          echo "BSOS: $BSOS"
          echo "BSUSER: $BSUSER"
          echo "AUTHTOKEN: $AUTHTOKEN"
          echo "BSAPP: $BSAPP"
          echo "LTM_GENERAL: $LTM_GENERAL"
          echo "LTM_GENERAL_PASS: $LTM_GENERAL_PASS"

      # Descargar la APK desde Dropbox si 'UPLOAD_APK' es 'Yes'
      - name: Download APK from Dropbox
        if: ${{ env.UPLOAD_APK == 'Yes' }}
        run: |
          echo "Downloading APK from Dropbox..."
          # Crear el directorio antes de descargar el archivo
          mkdir -p Tella-Testing/sample_apk/new
          curl -L -o Tella-Testing/sample_apk/new/app.apk "$DROPBOX_LINK"  # Descargar la APK desde Dropbox
          echo "APK downloaded successfully."

      # Verificar si la APK es accesible antes de subirla a BrowserStack
      - name: Verify APK exists
        if: ${{ env.UPLOAD_APK == 'Yes' }}
        run: |
          echo "Verifying APK file existence..."
          ls -l Tella-Testing/sample_apk/new/app.apk  # Verificar que el archivo esté allí
          echo "APK file verified."

      # Subir la APK a BrowserStack si 'UPLOAD_APK' es 'Yes'
      - name: Upload APK to BrowserStack
        if: ${{ env.UPLOAD_APK == 'Yes' }}
        run: |
          APK_PATH="Tella-Testing/sample_apk/new/app.apk"  # Ruta directamente al archivo descargado
          response=$(curl -v -u "$BSUSER:$AUTHTOKEN" "https://api-cloud.browserstack.com/app-automate/versions.json?app_name=$(basename $APK_PATH)")  # Agregando -v para más detalles en la respuesta
          
          if echo "$response" | grep -q '"status":"ok"'; then
            echo "APK already uploaded to BrowserStack."
          else
            echo "APK not found on BrowserStack. Uploading..."
            upload_response=$(curl -v -u "$BSUSER:$AUTHTOKEN" -X POST "https://api-cloud.browserstack.com/app-automate/upload" -F "file=@$APK_PATH")  # Respuesta de la carga

            # Extraer el APK ID de la respuesta JSON
            apk_id=$(echo "$upload_response" | jq -r '.app_id')  # Usamos 'jq' para extraer el ID del JSON

            if [ "$apk_id" != "null" ]; then
              echo "APK uploaded successfully. APK ID: $apk_id"
              echo "APK ID: $apk_id" > apk_id.txt  # Guardar el APK ID en un archivo
            else
              echo "Failed to upload APK. No APK ID returned."
            fi
          fi

      - name: Save APK ID to a file
        if: ${{ env.UPLOAD_APK == 'Yes' }}
        run: |
          echo "APK ID: $apk_id" > apk_id.txt
          echo "APK ID saved to apk_id.txt"

      - name: Upload APK ID as an artifact
        if: ${{ env.UPLOAD_APK == 'Yes' }}
        uses: actions/upload-artifact@v4.3.4
        with:
          name: apk-id
          path: apk_id.txt

      - name: Running Maven clean test
        run: |
          echo "Running tests with filter: '$COMBINED_FILTER' on device: '$BSDEVICE' with OS version: '$BSOS'"
          mvn clean test -Dcrowdar.cucumber.filter="'$COMBINED_FILTER'" \
                         -Denv.BSDEVICE="${{ github.event.inputs.device }}" \
                         -Denv.BSOS="$BSOS" \
                         -DTEST_MANAGER_RUN_NAME="AUTO-${{ github.event.inputs.device }}-${{ github.event.inputs.filter }}" \
                         -DLTM_GENERAL="${{ secrets.LTM_GENERAL }}" \
                         -DLTM_GENERAL_PASS="${{ secrets.LTM_GENERAL_PASS }}" \
                         -PBrowserStack -PAndroid -U
        shell: bash

      - name: Uploading test reports
        uses: actions/upload-artifact@v4.3.4
        with:
          name: test-results
          path: target/reports/

      - name: Uploading surefire test reports
        uses: actions/upload-artifact@v4.3.4
        with:
          name: test-results-surefire
          path: target/surefire-reports/
